How did viewing a diff between two versions of a file help you see the bug that was introduced?
	- The diff command highlights differences between two files. Additionally, it marks with ++ or -- whether a line was added or deleted in the new file compared to the old one. On windows the command is fc (file compare). 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
	- Version history allows you to go back and find or revert back to previous versions of a code. This may be useful when you make a mistake you can't find, or want to find a feature that you have previously removed.
	
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
	- Manually committing allows you to save at points that make sense, rather than midway through doing something.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
	- Saving multiple files in one commit may make more sense if the files are all needed for a project, rather than an individual file. That is, if some files call upon others, and if you have made edits to multiple files at once.

How can you use the commands git log and git diff to view the history of files?
	- Git log helps you view the history of changes while git diff helps you identify what the changes are
	
How might using version control make you more confident to make changes that could break something?
	- If you break something, you can easily revert to an earlier, unbroken state.

Now that you have your workspace set up, what do you want to try using Git for?
	- I want to use it to make a planner program
